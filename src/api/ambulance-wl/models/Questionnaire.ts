/* tslint:disable */
/* eslint-disable */
/**
 * Questionnaire Api
 * Patient questionnaire management for Web-In-Cloud system
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: xandelt1@stuba.sk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { QuestionnaireQuestion } from './QuestionnaireQuestion';
import {
    QuestionnaireQuestionFromJSON,
    QuestionnaireQuestionFromJSONTyped,
    QuestionnaireQuestionToJSON,
} from './QuestionnaireQuestion';

/**
 * 
 * @export
 * @interface Questionnaire
 */
export interface Questionnaire {
    /**
     * Unique questionnaire entry ID
     * @type {string}
     * @memberof Questionnaire
     */
    id: string;
    /**
     * Patientâ€™s full name
     * @type {string}
     * @memberof Questionnaire
     */
    name: string;
    /**
     * Patient identifier in Web-In-Cloud system
     * @type {string}
     * @memberof Questionnaire
     */
    patientId: string;
    /**
     * Last modification timestamp (ISO 8601)
     * @type {Date}
     * @memberof Questionnaire
     */
    lastModified: Date;
    /**
     * 
     * @type {Array<QuestionnaireQuestion>}
     * @memberof Questionnaire
     */
    questions: Array<QuestionnaireQuestion>;
}

/**
 * Check if a given object implements the Questionnaire interface.
 */
export function instanceOfQuestionnaire(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "patientId" in value;
    isInstance = isInstance && "lastModified" in value;
    isInstance = isInstance && "questions" in value;

    return isInstance;
}

export function QuestionnaireFromJSON(json: any): Questionnaire {
    return QuestionnaireFromJSONTyped(json, false);
}

export function QuestionnaireFromJSONTyped(json: any, ignoreDiscriminator: boolean): Questionnaire {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': json['name'],
        'patientId': json['patientId'],
        'lastModified': (new Date(json['lastModified'])),
        'questions': ((json['questions'] as Array<any>).map(QuestionnaireQuestionFromJSON)),
    };
}

export function QuestionnaireToJSON(value?: Questionnaire | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'name': value.name,
        'patientId': value.patientId,
        'lastModified': (value.lastModified.toISOString()),
        'questions': ((value.questions as Array<any>).map(QuestionnaireQuestionToJSON)),
    };
}

