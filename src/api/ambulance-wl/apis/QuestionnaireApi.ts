/* tslint:disable */
/* eslint-disable */
/**
 * Questionnaire Api
 * Patient questionnaire management for Web-In-Cloud system
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: xandelt1@stuba.sk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Questionnaire,
} from '../models';
import {
    QuestionnaireFromJSON,
    QuestionnaireToJSON,
} from '../models';

export interface GetQuestionnaireEntriesRequest {
    ambulanceId: string;
}

/**
 * QuestionnaireApi - interface
 *
 * @export
 * @interface QuestionnaireApiInterface
 */
export interface QuestionnaireApiInterface {
    /**
     *
     * @summary Provides the ambulance questionnaire entries
     * @param {string} ambulanceId ID ambulancie
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestionnaireApiInterface
     */
    getQuestionnaireEntriesRaw(requestParameters: GetQuestionnaireEntriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Questionnaire>>>;

    /**
     * Provides the ambulance questionnaire entries
     */
    getQuestionnaireEntries(requestParameters: GetQuestionnaireEntriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Questionnaire>>;

}

/**
 *
 */
export class QuestionnaireApi extends runtime.BaseAPI implements QuestionnaireApiInterface {

    /**
     * Provides the ambulance questionnaire entries
     */
    async getQuestionnaireEntriesRaw(requestParameters: GetQuestionnaireEntriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Questionnaire>>> {
      console.log("getQuestionnaireEntriesRaw called with parameters: ", requestParameters);
        if (requestParameters.ambulanceId === null || requestParameters.ambulanceId === undefined) {
            throw new runtime.RequiredError('ambulanceId','Required parameter requestParameters.ambulanceId was null or undefined when calling getQuestionnaireEntries.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/questionnaire/{ambulanceId}/entries`.replace(`{${"ambulanceId"}}`, encodeURIComponent(String(requestParameters.ambulanceId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(QuestionnaireFromJSON));
    }

    /**
     * Provides the ambulance questionnaire entries
     */
    async getQuestionnaireEntries(requestParameters: GetQuestionnaireEntriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Questionnaire>> {
        const response = await this.getQuestionnaireEntriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
